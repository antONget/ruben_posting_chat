import time
import telebot
from telebot import types
from yoomoney import Quickpay

from keyboards import admin_keyboard, user_keyboard
from database import requests, requests_admin
from config_data.config import Config, load_config

import logging


config: Config = load_config()

admin_id = int(config.tg_bot.admin_ids)

bot = telebot.TeleBot(config.tg_bot.token)
logger = logging.getLogger(__name__)
logging.basicConfig(
        level=logging.INFO,
        # filename="py_log.log",
        # filemode='w',
        format='%(filename)s:%(lineno)d #%(levelname)-8s '
               '[%(asctime)s] - %(name)s - %(message)s')
logger.info('Starting bot')
logging.info('on_startup_notify')
date_now = time.strftime("%Y-%m-%d", time.localtime())
time_now = time.strftime("%H:%M:%S", time.localtime())
try:
    text = (f"‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!‚úÖ\n"
            f"üìÖ–î–∞—Ç–∞: {date_now}\n"
            f"‚è∞–í—Ä–µ–º—è: {time_now}")
    bot.send_message(chat_id=config.tg_bot.support_id, text=text)
except Exception as err:
    logging.exception(err)

def extract_arg(arg):
    return arg.split()[1:]

@bot.message_handler(commands=['start'])
def start(message):
    comand = extract_arg(message.text)
    print(comand)

    logging.info('start')
    user_id = message.from_user.id
    requests.create_table(message)

    if user_id == admin_id:
        markup = admin_keyboard.create_reply_markup_admin()
        bot.send_message(chat_id=message.chat.id,
                         text='–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                         reply_markup=markup)
        bot.register_next_step_handler(message, main_admin)
    if user_id != admin_id:
        markup = user_keyboard.create_start_reply_markup_user()
        bot.send_message(chat_id=message.chat.id,
                         text='–ü—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                         reply_markup=markup)
        bot.register_next_step_handler(message, main_user_pay_or_not)


@bot.message_handler(content_types=['text'])
def main_user_pay_or_not(message):
    logging.info('main_user_pay_or_not')
    if message.text == '–ù–∞—á–∞—Ç—å':
        user_id = message.from_user.id

        data = requests.check_data_cnt_message(message)
        if (data == []) or (data[0][1] == 0):
            markup = types.InlineKeyboardMarkup()

            quickpay_15 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=2,
                label=f'{user_id}'
            )

            btn1 = types.InlineKeyboardButton(text=f'15 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_15} —Ä—É–±–ª—è)',
                                              url=quickpay_15.base_url)
            markup.add(btn1)

            quickpay_50 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=3,
                label=f'{user_id}'
            )

            btn2 = types.InlineKeyboardButton(text=f'50 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_50} —Ä—É–±–ª—è)',
                                              url=quickpay_50.base_url)
            markup.add(btn2)

            quickpay_100 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=4,
                label=f'{user_id}'
            )

            btn3 = types.InlineKeyboardButton(text=f'100 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_100} —Ä—É–±–ª—è)',
                                              url=quickpay_100.base_url)
            markup.add(btn3)

            quickpay_200 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=5,
                label=f'{user_id}'
            )

            btn4 = types.InlineKeyboardButton(text=f'200 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_200} —Ä—É–±–ª–µ–π)',
                                              url=quickpay_200.base_url)
            markup.add(btn4)
            bot.send_message(chat_id=message.chat.id,
                             text='–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                             reply_markup=markup)
            time.sleep(3)

            markup_2 = user_keyboard.create_subscribe_verification_markup()

            bot.send_message(chat_id=message.chat.id,
                             text='–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ"',
                             reply_markup=markup_2)
            bot.register_next_step_handler(message, proverka)

        else:
            markup = user_keyboard.main_menu_buttons()
            bot.send_message(chat_id=message.chat.id,
                             text=f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {data[0][1]} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏',
                             reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ')
def proverka(message):
    logging.info('proverka')
    markup_3 = user_keyboard.create_start_reply_markup_user()
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ,–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É')

    token = config.tg_bot.yoomoney_access_token
    amount_15 = float(config.tg_bot.tarif_15)
    amount_50 = float(config.tg_bot.tarif_50)
    amount_100 = float(config.tg_bot.tarif_100)
    amount_200 = float(config.tg_bot.tarif_200)
    cnt = requests.proverka(message, token,amount_15,amount_50,amount_100,amount_200)
    if cnt:
        bot.send_message(chat_id=message.chat.id,
                         text=f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏,—Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {cnt} —Å–æ–æ–±—â–µ–Ω–∏–π\n'
                              f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"', reply_markup=markup_3)
    else:
        markup = user_keyboard.support_button()
        bot.send_message(chat_id=message.chat.id,
                         text='–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞,–ø–æ–ø—Ä–æ–±–π—É—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                         reply_markup=markup)
        bot.register_next_step_handler(message,main_user_pay_or_not)


@bot.callback_query_handler(func=lambda callback: (callback.data == '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'))
def main_user(callback):
    logging.info('main_user')
    user_id = callback.from_user.id

    if callback.data == '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':

        cnt = requests.check_message_cht(user_id)

        if cnt == 0:
            main_user_pay_or_not(callback.message)

        else:
            bot.send_message(chat_id=callback.message.chat.id,
                             text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
                                  ' (–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ–ø–µ—á–∞—Ç–æ–∫)')
            bot.register_next_step_handler(callback.message, get_message)


@bot.message_handler(content_types=['text'])
def get_message(message):
    logging.info('get_message')
    user_id = message.from_user.id
    message_to_send = str(message.text)

    if not requests.send_message_to_chat(message_to_send, user_id):
        markup = user_keyboard.support_button()
        bot.send_message(chat_id=message.chat.id,
                         text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é,–≤ –Ω–µ–º –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø —Å–ª–æ–≤–∞.\n'
                              '–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å'
                              ' –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                         reply_markup=markup)

        markup = user_keyboard.create_start_reply_markup_user()
        bot.send_message(chat_id=message.chat.id,
                         text='–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"',
                         reply_markup=markup)
        bot.register_next_step_handler(message, main_user_pay_or_not)

    else:
        markup = user_keyboard.create_start_reply_markup_user()
        bot.send_message(chat_id=message.chat.id,
                         text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
                         reply_markup=markup)

        # –ó–î–ï–°–¨ –ù–£–ñ–ù–û –ü–ï–†–ï–î–ê–í–ê–¢–¨ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–õ–£–ß–ï–ù–ù–´–ï –ü–†–ò –í–•–û–î–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        bot.send_message(chat_id=chat_id,
                         text=message_to_send)

        bot.register_next_step_handler(message, main_user_pay_or_not)


@bot.message_handler(func=lambda message:(message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤') or (message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç'))
def main_admin(message):
    logging.info('main_admin')
    if message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤':
        markup = admin_keyboard.create_inline_markup_admin()
        bot.send_message(chat_id=message.chat.id,
                         text='–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ?\n'
                              '–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞',
                         reply_markup=markup)

    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç':
        bot.send_message(chat_id=message.chat.id,text='–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞,—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ peer_id —á–∞—Ç–∞ —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–Ω–∞–∫–∞–º–∏ "|"')
        bot.register_next_step_handler(message,create_post)

@bot.callback_query_handler(func=lambda callback: ((callback.data == '–û–¥–Ω–æ') or (callback.data == '–ù–µ—Å–∫–æ–ª—å–∫–æ')))
def add_words(callback):
    logging.info('add_words')
    if callback.data == '–û–¥–Ω–æ':
        bot.send_message(chat_id=callback.message.chat.id,
                         text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤')
        bot.register_next_step_handler(callback.message, one_word)

    if callback.data == '–ù–µ—Å–∫–æ–ª—å–∫–æ':
        bot.send_message(chat_id=callback.message.chat.id,
                         text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        bot.register_next_step_handler(callback.message, many_words)


@bot.message_handler(content_types=['text'])
def create_post(message):
    logging.info('create_post')
    data = requests_admin.create_attach_post(message)
    print(data)
    message_to_send = data[0]
    buttun_text = data[1]
    chat_id = int(data[2])
    peer_id = f'https://t.me/Testatstatsbot?start={data[2]}'

    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text=buttun_text,url=f'{peer_id}')
    markup.add(btn)

    sent_message  = bot.send_message(chat_id=chat_id,text=message_to_send,reply_markup=markup)
    bot.pin_chat_message(chat_id,sent_message.message_id)

def one_word(message):
    logging.info('one_word')
    markup = admin_keyboard.create_reply_markup_admin()
    requests_admin.get_one_word(message)
    bot.send_message(chat_id=message.chat.id,
                     text='–°—Ç–æ–ø —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                     reply_markup=markup)
    bot.register_next_step_handler(message, main_admin)


def many_words(message):
    logging.info('many_words')
    markup = admin_keyboard.create_reply_markup_admin()
    requests_admin.get_many_words(message)
    bot.send_message(chat_id=message.chat.id,
                     text='–°—Ç–æ–ø —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
                     reply_markup=markup)
    bot.register_next_step_handler(message, main_admin)


bot.polling(none_stop=True)
