import time
import telebot
from telebot import types
from yoomoney import Quickpay
import sqlite3

from keyboards import admin_keyboard, user_keyboard
from database import requests, requests_admin
from config_data.config import Config, load_config

import logging
waiting_message_admin = False

config: Config = load_config()

admin_ids = str(config.tg_bot.admin_ids)
admin_ids_list = admin_ids.split(',')

bot = telebot.TeleBot(config.tg_bot.token)
logger = logging.getLogger(__name__)
logging.basicConfig(
        level=logging.INFO,
        # filename="py_log.log",
        # filemode='w',
        format='%(filename)s:%(lineno)d #%(levelname)-8s '
               '[%(asctime)s] - %(name)s - %(message)s')
logger.info('Starting bot')
logging.info('on_startup_notify')
date_now = time.strftime("%Y-%m-%d", time.localtime())
time_now = time.strftime("%H:%M:%S", time.localtime())
try:
    text = (f"‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!‚úÖ\n"
            f"üìÖ–î–∞—Ç–∞: {date_now}\n"
            f"‚è∞–í—Ä–µ–º—è: {time_now}")
    bot.send_message(chat_id=config.tg_bot.support_id, text=text)
except Exception as err:
    logging.exception(err)


def extract_arg(arg):
    return arg.split()[1:]


@bot.message_handler(commands=['start'])
def start(message):
    logging.info('start')
    comand = extract_arg(message.text)

    logging.info('start')
    user_id = message.from_user.id
    requests.create_table(message)

    conn = sqlite3.connect('database/USERS.sql')
    cur = conn.cursor()
    cur.execute(f'UPDATE user_{user_id} SET id = "{user_id}"')
    # cur.execute(f'UPDATE user_{user_id} SET message_cnt = "{50}"')
    conn.commit()
    cur.close()
    conn.close()



    if str(user_id) in admin_ids_list:
        markup = admin_keyboard.create_reply_markup_admin()
        bot.send_message(chat_id=message.chat.id,
                         text='–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                         reply_markup=markup)
        bot.register_next_step_handler(message, main_admin)
    if str(user_id) not in admin_ids_list:
        if not comand:
            markup = user_keyboard.create_subscribe_verification_markup()
            bot.send_message(chat_id=message.chat.id,
                             text='–ü—Ä–∏–≤–µ—Ç! üéâ\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ '
                                  '–±—ã—Å—Ç—Ä–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. \n\nüåü–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ'
                                  ' –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –¥–æ–Ω–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏! '
                                  'üì£\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! ü§ó\n\n–£–¥–∞—á–∏ —Å –≤–∞—à–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏! üöÄ')
            bot.send_message(chat_id=message.chat.id, text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –±–æ—Ç–∞ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç'
                                                           ' –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã:\n'
                                                           '1. @sam_o_stroy\n'
                                                           '2. @raznorabochie_Vsevologhsk\n'
                                                           '–ß—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É'
                                                           ' –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç –∏ –∑–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –≤'
                                                           ' –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏',
                             reply_markup=markup)
            requests.add_chat_id_user(user_id, 'None')
        else:
            requests.add_chat_id_user(user_id, comand[0])
            markup_4 = user_keyboard.create_subscribe_verification_markup()
            bot.send_message(chat_id=message.chat.id,
                             text='–ü—Ä–∏–≤–µ—Ç! üéâ\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ '
                                  '–±—ã—Å—Ç—Ä–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. \n\nüåü–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ'
                                  ' –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –¥–æ–Ω–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏! '
                                  'üì£\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! ü§ó\n\n–£–¥–∞—á–∏ —Å –≤–∞—à–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏! üöÄ',
                             reply_markup=markup_4)

@bot.callback_query_handler(func=lambda callback:(callback.data == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
def support(callback):
    bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,
                          text='–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞, –ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º,'
                               '—Ç–∞–∫–∂–µ –±—É–¥–µ–º —Ä–∞–¥—ã —É—Å–ª—ã—à–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞.'
                               '\n@Mnenie_Ru'
                               '\n@Alextreide84',reply_markup=None)

@bot.message_handler(func=lambda message: (message.text == '–ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é'))
def main_user_pay_or_not(message):
    logging.info('main_user_pay_or_not')
    if message.text == '–ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é':
        user_id = message.from_user.id

        data = requests.check_data_cnt_message(message)
        if (data[0][1] is None) or (data[0][1] == 0):
            markup = types.InlineKeyboardMarkup()

            quickpay_1 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=config.tg_bot.tarif_1,
                label=f'{user_id}'
            )

            btn1 = types.InlineKeyboardButton(text=f'1 —Å–æ–æ–±—â–µ–Ω–∏–µ ({config.tg_bot.tarif_1} —Ä—É–±–ª–µ–π)',
                                              url=quickpay_1.base_url)
            markup.add(btn1)

            quickpay_5 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=config.tg_bot.tarif_5,
                label=f'{user_id}'
            )

            btn2 = types.InlineKeyboardButton(text=f'5 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_5} —Ä—É–±–ª—è)',
                                              url=quickpay_5.base_url)
            markup.add(btn2)

            quickpay_10 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=config.tg_bot.tarif_10,
                label=f'{user_id}'
            )

            btn3 = types.InlineKeyboardButton(text=f'10 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_10} —Ä—É–±–ª—è)',
                                              url=quickpay_10.base_url)
            markup.add(btn3)

            quickpay_50 = Quickpay(
                receiver=config.tg_bot.yoomoney_receiver,
                quickpay_form='shop',
                targets='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏',
                paymentType='SB',
                sum=config.tg_bot.tarif_50,
                label=f'{user_id}'
            )

            btn4 = types.InlineKeyboardButton(text=f'50 —Å–æ–æ–±—â–µ–Ω–∏–π ({config.tg_bot.tarif_50} —Ä—É–±–ª–µ–π)',
                                              url=quickpay_50.base_url)
            markup.add(btn4)
            bot.send_message(chat_id=message.chat.id,
                             text='–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                             reply_markup=markup)
            time.sleep(3)

            markup_2 = user_keyboard.check_pay_button()

            bot.send_message(chat_id=message.chat.id,
                             text='–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"',
                             reply_markup=markup_2)
            bot.register_next_step_handler(message, proverka)

        else:
            markup = user_keyboard.main_menu_buttons()
            bot.send_message(chat_id=message.chat.id,
                             text=f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {data[0][1]} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n'
                                  f'–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ <b>"–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"</b>\n'
                                  f'–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ <b>"–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"</b>',
                             reply_markup=markup,parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É')
def proverka(message):
    logging.info('proverka')
    markup_3 = user_keyboard.create_subscribe_verification_markup()
    bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ,–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É')

    token = config.tg_bot.yoomoney_access_token
    amount_1 = float(config.tg_bot.tarif_1)
    amount_5 = float(config.tg_bot.tarif_5)
    amount_10 = float(config.tg_bot.tarif_10)
    amount_50 = float(config.tg_bot.tarif_50)
    cnt = requests.proverka(message, token, amount_1, amount_5, amount_10, amount_50)
    if cnt:
        bot.send_message(chat_id=message.chat.id,
                         text=f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏,—Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {cnt} —Å–æ–æ–±—â–µ–Ω–∏–π\n'
                              f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"', reply_markup=markup_3)
    else:
        markup = user_keyboard.support_button()
        bot.send_message(chat_id=message.chat.id,
                         text='–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞,–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                         reply_markup=markup)
        bot.register_next_step_handler(message, proverka)


@bot.callback_query_handler(func=lambda callback: (callback.data == 'write_message'))
def main_user(callback):
    logging.info('main_user')
    user_id = callback.from_user.id

    if callback.data == 'write_message':

        cnt = requests.check_message_cht(user_id)

        if cnt == 0:
            main_user_pay_or_not(callback.message)

        else:
            bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,
                                  text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'
                                       ' (–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ–ø–µ—á–∞—Ç–æ–∫)',
                                  reply_markup=types.InlineKeyboardMarkup())
            bot.register_next_step_handler(callback.message, get_message)


@bot.message_handler(func=lambda message: False)
def get_message(message):
    logging.info('get_message')
    user_id = message.from_user.id
    message_to_send = str(message.text)
    if message_to_send == '–ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é':
        main_user_pay_or_not(message)

    else:

        if not requests.send_message_to_chat(message_to_send, user_id):
            markup = user_keyboard.support_button()
            bot.send_message(chat_id=message.chat.id,
                             text='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é,–≤ –Ω–µ–º –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø —Å–ª–æ–≤–∞.\n'
                                  '–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å'
                                  ' –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                             reply_markup=markup)

            markup = user_keyboard.create_subscribe_verification_markup()
            bot.send_message(chat_id=message.chat.id,
                             text='–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"',
                             reply_markup=markup)
            bot.register_next_step_handler(message, main_user_pay_or_not)
        else:
            media_data = requests.get_media(user_id)
            if str(media_data) == 'None':
                markup = user_keyboard.add_photo_or_video_buttons(user_id)
                bot.send_message(chat_id=message.chat.id,
                                     text=f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞ —Ç–∞–∫–∂–µ –æ—Ç—Ä–µ—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ \n\n–≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: {message_to_send}\n\n'
                                          f'–ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ"',
                                     reply_markup=markup)
                requests.save_message_to_send(message_to_send,user_id)
            else:
                requests.save_message_to_send(message_to_send, user_id)
                pre_post(message)

@bot.callback_query_handler(func=lambda callback:('–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ' in callback.data) or ('–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ' in callback.data) or ('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ' in callback.data) or ('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç' in callback.data))
def redact_or_send_post(callback):
    user_id = callback.from_user.id

    if callback.data == f'–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {user_id}':
        bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –¥–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –ø–æ—Å—Ç—É\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"',reply_markup=None)

    if callback.data == f'–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ {user_id}':
        bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –∫ –ø–æ—Å—Ç—É\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"',reply_markup=None)

    if callback.data == f'–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ {user_id}':
        chat_id = requests.get_chat_id(user_id)

        if str(chat_id) != 'None':
            link_name_data = requests.get_group_name_by_id(chat_id)

            name = link_name_data[0][0]
            link = str(link_name_data[0][2])

            while ' ' in link:
                link = link.replace(' ','')

            message_to_send = str(requests.get_message_to_send(user_id)[0][0]) + f'\nüì£ <code>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –≥—Ä—É–ø–ø–µ:</code> <a href="{link}">{name}\n–ü–æ–¥–ø–∏—à–∏—Å—å!!!</a> ‚úîÔ∏è'

        else:
            message_to_send = str(requests.get_message_to_send(user_id)[0][0]) + (f'\n'
                                                                                  f'üì£ <code>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –≥—Ä—É–ø–ø–∞—Ö:</code> <a href="https://t.me/raznorabochie_Vsevologsk">–†–∞–∑–Ω–æ—Ä–∞–±–æ—á–∏–µ –í—Å–µ–≤–æ–ª–æ–∂—Å–∫üõ†Ô∏è</a>\n'
                                                                                    f' <a href="https://t.me/sam_o_stroy">–°–∞–º–æ—Å—Ç—Ä–æ–π üè°</a>!!! ‚úîÔ∏è')

        data = requests.get_media(user_id).split('|')

        media_files = []

        try:
            if data[0].split(':')[0] == 'photo':
                media_files.append(types.InputMediaPhoto(data[0].split(':')[1], caption=message_to_send,parse_mode='HTML'))

            else:
                media_files.append(types.InputMediaVideo(data[0].split(':')[1], caption=message_to_send,parse_mode='HTML'))

            for elem_id in data[1:]:
                if elem_id.split(':')[0] == 'photo':
                    media_files.append(types.InputMediaPhoto(elem_id.split(':')[1]))

                if elem_id.split(':')[0] == 'video':
                    media_files.append(types.InputMediaVideo(elem_id.split(':')[1]))

        except IndexError as e:
            media_files = []


        if str(chat_id) != 'None':
            if media_files != []:
                bot.send_media_group(chat_id,media_files)

                requests.del_one_message(user_id)
                requests.clean_media_files(user_id)

                bot.send_message(callback.message.chat.id,'–í–∞—à–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',reply_markup=user_keyboard.create_subscribe_verification_markup())

                bot.register_next_step_handler(callback.message, main_user_pay_or_not)

            else:
                bot.send_message(chat_id=chat_id,text=message_to_send,parse_mode='HTML')

                requests.del_one_message(user_id)
                requests.clean_media_files(user_id)

                bot.send_message(callback.message.chat.id, '–í–∞—à–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
                                 reply_markup=user_keyboard.create_subscribe_verification_markup())

                bot.register_next_step_handler(callback.message, main_user_pay_or_not)


        else:
            if media_files != []:
                ids = str(config.tg_bot.chat_id).split(',')
                for chat_id in ids:
                    if chat_id == '':
                        continue
                    else:
                        bot.send_media_group(int(chat_id),media_files)

                requests.del_one_message(user_id)
                requests.clean_media_files(user_id)

                bot.send_message(callback.message.chat.id, '–í–∞—à–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
                                 reply_markup=user_keyboard.create_subscribe_verification_markup())

                bot.register_next_step_handler(callback.message, main_user_pay_or_not)

            else:
                ids = str(config.tg_bot.chat_id).split(',')
                for chat_id in ids:
                    if chat_id == '':
                        continue
                    else:
                        bot.send_message(chat_id=chat_id,text=message_to_send,parse_mode='HTML')

                requests.del_one_message(user_id)
                requests.clean_media_files(user_id)

                bot.send_message(callback.message.chat.id, '–í–∞—à–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
                                 reply_markup=user_keyboard.create_subscribe_verification_markup())

                bot.register_next_step_handler(callback.message, main_user_pay_or_not)



    if callback.data == f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç {user_id}':
        bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.message_id,text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç',reply_markup=None)
        bot.register_next_step_handler(callback.message,get_message)

@bot.message_handler(content_types=['photo'])
def get_photo_to_post(message):
    user_id = message.from_user.id
    photo_ids = []

    for index ,photo in enumerate(message.photo):
        if index%4 == 0:
            id = photo.file_id
            photo_ids.append(id)

    media_data = requests.get_media(user_id)

    photo_id = photo_ids[0]
    new_media = ''
    if str(media_data) == 'None':
        new_media = f'photo:{photo_id}' + '|'
    else:
        new_media = media_data + f'photo:{photo_id}' + '|'
    requests.update_media_files(user_id,new_media)
    bot.send_message(message.chat.id, '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ,–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ',reply_markup=user_keyboard.pre_send_post_button())


@bot.message_handler(content_types=['video'])
def get_video_to_post(message):
    user_id = message.from_user.id

    video_ids = []

    video_ids.append(message.video.file_id)

    media_data = requests.get_media(user_id)
    for video_id in video_ids:
        media_data += f'video:{video_id}' + '|'

    requests.update_media_files(user_id, media_data)
    bot.send_message(message.chat.id, '–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ',reply_markup=user_keyboard.pre_send_post_button())


@bot.message_handler(func=lambda message:(message.text == '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä'))
def pre_post(message):
    user_id = message.from_user.id

    data = requests.get_media(user_id).split('|')

    media_files = []
    message_to_send = str(requests.get_message_to_send(user_id)[0][0])

    if data[0].split(':')[0] == 'photo':
        media_files.append(types.InputMediaPhoto(data[0].split(':')[1],caption=message_to_send))

    else:
        media_files.append(types.InputMediaVideo(data[0].split(':')[1],caption=message_to_send))

    # print(data)
    for elem_id in data[1:]:
        if elem_id.split(':')[0] == 'photo':
            media_files.append(types.InputMediaPhoto(elem_id.split(':')[1]))
            # print(1)

        if elem_id.split(':')[0] == 'video':
            media_files.append(types.InputMediaVideo(elem_id.split(':')[1]))

    bot.send_media_group(message.chat.id,media_files)
    bot.send_message(message.chat.id,f'–≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=user_keyboard.add_photo_or_video_buttons(user_id))




@bot.message_handler(func=lambda message:(message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤') or
                                         (message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç') or (
    message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤') or (message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤'))

def main_admin(message):
    logging.info('main_admin')
    if message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤':
        markup = admin_keyboard.create_inline_markup_admin()
        bot.send_message(chat_id=message.chat.id,
                         text='–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ?\n'
                              '–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞',
                         reply_markup=markup)

    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç':
        bot.send_message(chat_id=message.chat.id,
                         text='–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞,—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏'
                              ' , peer_id —á–∞—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–Ω–∞–∫–∞–º–∏ "|" (peer_id –≥—Ä—É–ø–ø—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é'
                              ' –±–æ—Ç–∞ @username_to_id_bot\n'
                              '–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ | –û–±—ä—è–≤–ª–µ–Ω–∏–µ |'
                              ' -1002454315455 | https://t.me/example_link | –°–∞–º–æ—Å—Ç—Ä–æ–π</code>',
                         parse_mode='html')
        bot.register_next_step_handler(message,create_post)

    if message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤':
        words = requests_admin.get_all_stop_words()
        bot.send_message(chat_id=message.chat.id,text=words)

    if message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤':
        result = requests_admin.delete_all_stop_words()
        if result:
            bot.send_message(chat_id=message.chat.id,
                             text='–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤ –æ—á–∏—â–µ–Ω')
        else:
            bot.send_message(chat_id=message.chat.id,
                             text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@bot.callback_query_handler(func=lambda callback: ((callback.data == '–û–¥–Ω–æ') or
                                                   (callback.data == '–ù–µ—Å–∫–æ–ª—å–∫–æ')))
def add_words(callback):
    global waiting_message_admin
    logging.info('add_words')
    if callback.data == '–û–¥–Ω–æ':
        bot.send_message(chat_id=callback.message.chat.id,
                         text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ø —Å–ª–æ–≤')
        bot.register_next_step_handler(callback.message, one_word)
        waiting_message_admin = True

    if callback.data == '–ù–µ—Å–∫–æ–ª—å–∫–æ':
        bot.send_message(chat_id=callback.message.chat.id,
                         text='–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
        bot.register_next_step_handler(callback.message, many_words)
        waiting_message_admin = True


@bot.message_handler(func=lambda message: waiting_message_admin)
def create_post(message):
    global waiting_message_admin
    logging.info('create_post')
    try:
        data = requests_admin.create_attach_post(message)
        message_to_send = data[0]
        buttun_text = data[1]
        chat_id = int(data[2])
        peer_id = f'https://t.me/{config.tg_bot.bot_link_name}?start={data[2]}'
        href = str(data[3])
        group_name = str(data[4])
        requests_admin.add_name_and_id_group(group_name,
                                             chat_id,
                                             href)

        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(text=buttun_text,
                                         url=f'{peer_id}')
        markup.add(btn)
        try:
            sent_message = bot.send_message(chat_id=chat_id,text=message_to_send,reply_markup=markup)
            bot.pin_chat_message(chat_id=chat_id,
                                 message_id=sent_message.message_id)
            bot.register_next_step_handler(message, main_admin)
            waiting_message_admin = False

        except Exception as e:
            print(e)
            bot.send_message(message.chat.id,
                             '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω peer_id —á–∞—Ç–∞ –ª–∏–±–æ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞, '
                             '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, create_post)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id,
                         '–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ,–ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')



def one_word(message):
    global waiting_message_admin
    logging.info('one_word')
    markup = admin_keyboard.create_reply_markup_admin()
    requests_admin.get_one_word(message)
    bot.send_message(chat_id=message.chat.id,
                     text='–°—Ç–æ–ø —Å–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
                     reply_markup=markup)
    bot.register_next_step_handler(message, main_admin)
    waiting_message_admin = False


def many_words(message):
    global waiting_message_admin
    logging.info('many_words')
    markup = admin_keyboard.create_reply_markup_admin()
    requests_admin.get_many_words(message)
    bot.send_message(chat_id=message.chat.id,
                     text='–°—Ç–æ–ø —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
                     reply_markup=markup)
    bot.register_next_step_handler(message, main_admin)
    waiting_message_admin = False


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        time.sleep(2)
